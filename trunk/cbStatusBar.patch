Index: CodeBlocks.cbp
===================================================================
--- CodeBlocks.cbp	(revision 6188)
+++ CodeBlocks.cbp	(working copy)
@@ -556,6 +556,9 @@
 		<Unit filename="include\cbproject.h">
 			<Option target="sdk" />
 		</Unit>
+		<Unit filename="include\cbstatusbar.h">
+			<Option target="sdk" />
+		</Unit>
 		<Unit filename="include\cbstyledtextctrl.h">
 			<Option target="sdk" />
 		</Unit>
@@ -1274,6 +1277,18 @@
 		<Unit filename="plugins\compilergcc\compilerGNUTRICORE.h">
 			<Option target="Compiler" />
 		</Unit>
+		<Unit filename="plugins\compilergcc\compilerGNUZPU.cpp">
+			<Option target="Compiler" />
+		</Unit>
+		<Unit filename="plugins\compilergcc\compilerGNUZPU.h">
+			<Option target="Compiler" />
+		</Unit>
+		<Unit filename="plugins\compilergcc\compilerGNUFortran.cpp">
+			<Option target="Compiler" />
+		</Unit>
+		<Unit filename="plugins\compilergcc\compilerGNUFortran.h">
+			<Option target="Compiler" />
+		</Unit>
 		<Unit filename="plugins\compilergcc\compilerICC.cpp">
 			<Option target="Compiler" />
 		</Unit>
@@ -1976,6 +1991,9 @@
 		<Unit filename="sdk\cbproject.cpp">
 			<Option target="sdk" />
 		</Unit>
+		<Unit filename="sdk\cbstatusbar.cpp">
+			<Option target="sdk" />
+		</Unit>
 		<Unit filename="sdk\cbstyledtextctrl.cpp">
 			<Option target="sdk" />
 		</Unit>
@@ -3775,6 +3793,9 @@
 		<Unit filename="sdk\wxscintilla\src\scintilla\src\LexBasic.cxx">
 			<Option target="scintilla" />
 		</Unit>
+		<Unit filename="sdk\wxscintilla\src\scintilla\src\LexBibTex.cxx">
+			<Option target="scintilla" />
+		</Unit>
 		<Unit filename="sdk\wxscintilla\src\scintilla\src\LexBullant.cxx">
 			<Option target="scintilla" />
 		</Unit>
Index: include/cbplugin.h
===================================================================
--- include/cbplugin.h	(revision 6188)
+++ include/cbplugin.h	(working copy)
@@ -51,6 +51,7 @@
 class FileTreeData;
 class cbConfigurationPanel;
 struct PluginInfo;
+class cbStatusBar;
 
 // Define basic groups for plugins' configuration.
 static const int cgCompiler         = 0x01; ///< Compiler related.
@@ -157,6 +158,16 @@
 		  */
         virtual bool BuildToolBar(wxToolBar* toolBar) = 0;
 
+        #if wxUSE_STATUSBAR
+        /** This method is called by Code::Blocks and is used by the plugin
+		  * to add a field on Code::Blocks's statusbar.\n
+		  * If the plugin does not need to add items on the statusbar, just
+		  * do nothing ;)
+		  * @param statusBar the cbStatusBar to create items on
+		  */
+        virtual void CreateStatusField(cbStatusBar *statusBar){return;}
+        #endif
+
         /** See whether this plugin is attached or not. A plugin should not perform
 		  * any of its tasks, if not attached...
 		  * @note This function is *not* virtual.
Index: include/cbstatusbar.h
===================================================================
--- include/cbstatusbar.h	(revision 0)
+++ include/cbstatusbar.h	(revision 0)
@@ -0,0 +1,108 @@
+/*
+ * This file is part of the Code::Blocks IDE and licensed under the GNU Lesser General Public License, version 3
+ * http://www.gnu.org/licenses/lgpl-3.0.html
+ */
+
+#ifndef CBSTATUSBAR_H
+#define CBSTATUSBAR_H
+
+#include <vector>
+
+#include "settings.h"
+
+
+class cbPlugin;
+
+
+/** @brief A custom status bar which can contain controls, icons...
+  */
+class DLLIMPORT cbStatusBar : public wxStatusBar
+{
+private:
+    friend class MainFrame; // gets initialized from mainframe
+    cbStatusBar(wxWindow *parent,  wxWindowID id, long style, const wxString& name); // this will be used from friend mainframe
+    cbStatusBar(){};
+    cbStatusBar ( const cbStatusBar& );
+    ~cbStatusBar();
+//private:
+//    virtual bool GetFieldRect(int i, wxRect& rect) const
+//    virtual wxString GetStatusText(int i = 0) const
+//    void PopStatusText(int field = 0)
+//    void PushStatusText(const wxString& string, int field = 0)
+//    virtual void SetFieldsCount(int number = 1, int* widths = NULL)
+//    virtual void SetStatusText(const wxString& text, int i = 0)
+//    virtual void SetStatusStyles(int n, int *styles)
+
+public:
+    /** Sets the text for one field.
+        @param text  The text to be set.
+        @param plugin  The pugin which wants to set its status text
+      */
+    virtual void SetStatusText(const wxString& text, cbPlugin *plugin);
+
+    /** Returns the string associated with a status bar field.
+        @param  plugin  The plugin which wants to get its status text
+        @return The  status field string if the field id is valid, otherwise the empty string.
+      */
+    virtual wxString GetStatusText(cbPlugin *plugin) const;
+
+    /** Returns the size and position of a field's internal bounding rectangle.
+        @param  plugin  The plugin which wants to know its status-field size.
+        @param rect  The rectangle values are placed in this variable.
+        @return true if the field id is valid, false otherwise.
+      */
+    virtual bool GetFieldRect(cbPlugin *plugin, wxRect& rect) const;
+
+private:
+    void AdjustFieldsSize();
+    void PushStatusText(const wxString& text,cbPlugin *plugin){};
+    void PopStatusText(cbPlugin *plugin){};
+
+public:
+    // functions used for the mainframe:
+    virtual void SetStatusWidths(int n, const int widths[]);
+private:
+    std::vector<int> m_mainswidths;
+
+public:
+    /** Add a new field, which contains a control, to the status bar.
+        @param   plugin The plugin which wants to add a new statusfield
+        @param   ctrl   Pointer to the control to show on the new field.
+        @param   width  Width of the new field. See wxStatusBar::SetStatusWidths for the meaning of this parameter.
+      **/
+    void AddField(cbPlugin *plugin, wxWindow *ctrl, int width );
+
+    /** Add a new field to the status bar. The field contains no control.
+        @see cbStatusBar::AddField(cbPlugin *plugin, wxWindow *ctrl, int width) for details.
+      **/
+    void AddField(cbPlugin *plugin, int width);
+
+    /** Remove a field from the status bar.
+        If a control is associated wit this filed, RemoveField will destroy it.
+        @param id   The plugin which wants to remove its field
+      **/
+    void RemoveField(cbPlugin *plugin);
+
+
+private: // event handlers
+    void OnSize(wxSizeEvent& event);
+    void UpdateWidths();
+
+private:
+
+    class cbStatusBarElement{
+        public:
+            int width;
+            wxWindow *control;
+            cbPlugin *plugin;
+    };
+    typedef std::vector<cbStatusBarElement> ElementVector;
+    ElementVector m_elements;
+
+private:
+    int GetFieldNumberOfPlugin(cbPlugin *plugin)const;
+
+    DECLARE_EVENT_TABLE()
+};
+
+#endif //CBSTATUSBAR_H
Index: sdk/cbstatusbar.cpp
===================================================================
--- sdk/cbstatusbar.cpp	(revision 0)
+++ sdk/cbstatusbar.cpp	(revision 0)
@@ -0,0 +1,154 @@
+/*
+ * This file is part of the Code::Blocks IDE and licensed under the GNU Lesser General Public License, version 3
+ * http://www.gnu.org/licenses/lgpl-3.0.html
+ *
+ */
+
+#include "sdk_precomp.h"
+
+#ifndef CB_PRECOMP
+    #include <wx/frame.h> // wxFrame
+    #include <wx/menu.h>
+    #include "cbplugin.h"
+    #include "compiler.h" // GetSwitches
+    #include "sdk_events.h"
+    #include "manager.h"
+    #include "projectbuildtarget.h"
+    #include "cbproject.h"
+    #include "logmanager.h"
+#endif
+
+#include "cbstatusbar.h"
+
+BEGIN_EVENT_TABLE(cbStatusBar, wxStatusBar)
+    EVT_SIZE(cbStatusBar::OnSize)
+//    EVT_TIMER(wxID_ANY, MyStatusBar::OnTimer)
+END_EVENT_TABLE()
+
+
+cbStatusBar::cbStatusBar(wxWindow *parent,  wxWindowID id, long style, const wxString& name)
+    : wxStatusBar(parent, wxID_ANY, style, name)
+{
+    //single = this;
+}
+//cbStatusBar* cbStatusBar::single = NULL;
+//cbStatusBar* cbStatusBar::GetInstance()
+//{
+//    return single;
+//}
+
+cbStatusBar::~cbStatusBar()
+{
+    //single = NULL;
+}
+
+
+void cbStatusBar::OnSize(wxSizeEvent& event)
+{
+    AdjustFieldsSize();
+    event.Skip();
+}
+
+void cbStatusBar::AdjustFieldsSize()
+{
+    for ( unsigned int i = 0 ; i < m_elements.size(); i++)
+    {
+        wxWindow *ctrl = m_elements[i].control;
+        if ( ctrl )
+        {
+            wxRect rect;
+            GetFieldRect(m_elements[i].plugin, rect);
+            ctrl->SetSize(rect.x + 2, rect.y + 2, rect.width - 4, rect.height - 4);
+        }
+    }
+
+}
+
+
+void cbStatusBar::AddField(cbPlugin *plugin, wxWindow *ctrl, int width )
+{
+    cbStatusBarElement elem;
+    elem.control = ctrl;
+    elem.width = width;
+    elem.plugin =  plugin;
+
+    m_elements.push_back(elem);
+
+    UpdateWidths();
+
+    return;
+}
+void cbStatusBar::AddField(cbPlugin *plugin, int width)
+{
+    return AddField(plugin, (wxControl*)NULL, width);
+}
+void cbStatusBar::RemoveField(cbPlugin *plugin)
+{
+    for ( ElementVector::iterator it = m_elements.begin() ; it != m_elements.end() ; it++ )
+    {
+        if ( it->plugin == plugin )
+        {
+            if ( it->control )
+                it->control->Destroy();
+            m_elements.erase(it);
+            break;
+        }
+    }
+    UpdateWidths();
+}
+void cbStatusBar::UpdateWidths()
+{
+    unsigned int n = m_mainswidths.size() + m_elements.size();
+
+    int *widths = new int[n];
+    unsigned int i = 0;
+    for ( ; i < m_mainswidths.size() ; i++)
+        widths[i] = m_mainswidths[i];
+    for (int k= 0 ; i < n ; i++, k++ )
+        widths[i] = m_elements[k].width;
+
+    wxStatusBar::SetFieldsCount(n);
+    wxStatusBar::SetStatusWidths(n, widths);
+    delete[] widths;
+}
+void cbStatusBar::SetStatusWidths(int n, const int widths[])
+{
+    m_mainswidths.clear();
+    for (int i = 0 ; i < n ; i++)
+        m_mainswidths.push_back(widths[i]);
+    UpdateWidths();
+}
+int cbStatusBar::GetFieldNumberOfPlugin(cbPlugin *plugin) const
+{
+    for ( unsigned int i = 0 ; i < m_elements.size() ; i++ )
+    {
+        if ( m_elements[i].plugin == plugin )
+            return i+m_mainswidths.size();
+    }
+    // return -1 to indicate that the id does not exist
+    return -1;
+}
+
+void cbStatusBar::SetStatusText(const wxString& text, cbPlugin *plugin)
+{
+    int pos = GetFieldNumberOfPlugin(plugin);
+    if ( pos != -1 )
+        wxStatusBar::SetStatusText(text, pos);
+}
+wxString cbStatusBar::GetStatusText(cbPlugin *plugin) const
+{
+    int pos = GetFieldNumberOfPlugin(plugin);
+    if ( pos != -1 )
+        return wxStatusBar::GetStatusText(pos);
+    return wxEmptyString;
+}
+bool cbStatusBar::GetFieldRect(cbPlugin *plugin, wxRect& rect) const
+{
+    int pos = GetFieldNumberOfPlugin(plugin);
+    if ( pos != -1 )
+        return wxStatusBar::GetFieldRect(pos, rect);
+    return false;
+}
+
+
+
Index: src/main.cpp
===================================================================
--- src/main.cpp	(revision 6188)
+++ src/main.cpp	(working copy)
@@ -64,6 +64,9 @@
 #include "infowindow.h"
 #include "notebookstyles.h"
 #include "switcherdlg.h"
+#if wxUSE_STATUSBAR
+    #include "cbstatusbar.h"
+#endif
 
 class wxMyFileDropTarget : public wxFileDropTarget
 {
@@ -1382,7 +1385,16 @@
             Manager::Get()->GetConfigManager(_T("app"))->Write(_T("/main_frame/layout/default"), name);
     }
 }
-
+void MainFrame::DoAddPluginStatusField(cbPlugin* plugin)
+{
+#if wxUSE_STATUSBAR
+    cbStatusBar *sbar = (cbStatusBar *)GetStatusBar();
+    if (!sbar)
+        return;
+    plugin->CreateStatusField(sbar);
+    sbar->AdjustFieldsSize();
+#endif
+}
 void MainFrame::DoAddPluginToolbar(cbPlugin* plugin)
 {
     wxSize size = m_SmallToolBar ? wxSize(16, 16) : (platform::macosx ? wxSize(32, 32) : wxSize(22, 22));
@@ -1480,6 +1492,7 @@
         }
         // toolbar
         DoAddPluginToolbar(plugin);
+        DoAddPluginStatusField(plugin);
     }
 }
 
@@ -1669,6 +1682,7 @@
     if (!GetStatusBar())
         return;
     cbEditor* ed = Manager::Get()->GetEditorManager()->GetBuiltinActiveEditor();
+    EditorBase *eb = Manager::Get()->GetEditorManager()->GetActiveEditor();
     wxString personality(Manager::Get()->GetPersonalityManager()->GetPersonality());
     if (ed)
     {
@@ -1690,8 +1704,11 @@
     }
     else
     {
-        int panel = 0;
-        SetStatusText(_("Welcome to ") + appglobals::AppName + _T("!"), panel++);
+		int panel = 0;
+        if ( eb )
+            SetStatusText(eb->GetFilename(), panel++);
+        else
+            SetStatusText(_("Welcome to ") + appglobals::AppName + _T("!"), panel++);
         SetStatusText(wxEmptyString, panel++);
         SetStatusText(wxEmptyString, panel++);
         SetStatusText(wxEmptyString, panel++);
@@ -2741,13 +2758,6 @@
 
 void MainFrame::OnSize(wxSizeEvent& event)
 {
-    if (m_pProgressBar)
-    {
-        wxRect r;
-        GetStatusBar()->GetFieldRect(1, r);
-        m_pProgressBar->SetPosition(r.GetPosition());
-        m_pProgressBar->SetSize(r.GetSize());
-    }
 
     // for flicker-free display
     event.Skip();
@@ -3974,16 +3984,14 @@
 void MainFrame::OnToggleStatusBar(wxCommandEvent& event)
 {
     wxStatusBar* sb = GetStatusBar();
-    if (sb)
-    {
+    if (!sb) return;
+    if (sb->IsShown())
         sb->Hide();
-        SetStatusBar(0);
-        sb->Destroy();
-    }
     else
-        DoCreateStatusBar();
 
+        sb->Show();
     DoUpdateStatusBar();
+	DoUpdateLayout();
 }
 
 void MainFrame::OnFocusEditor(wxCommandEvent& event)
@@ -4103,6 +4111,12 @@
 
     cbPlugin* plugin = event.GetPlugin();
 
+#if wxUSE_STATUSBAR
+    cbStatusBar *sb = (cbStatusBar*)GetStatusBar();
+    if ( sb )
+        sb->RemoveField(plugin);
+#endif
+
     // remove toolbar, if any
     if (m_PluginsTools[plugin])
     {
@@ -4387,3 +4401,13 @@
     m_StartupDone = true;
     DoUpdateLayout();
 }
+
+#if wxUSE_STATUSBAR
+wxStatusBar *MainFrame::OnCreateStatusBar(int number, long style, wxWindowID id, const wxString& name)
+{
+    cbStatusBar *statusBar = new cbStatusBar(this, id, style, name);
+    statusBar->SetFieldsCount(number);
+
+    return statusBar;
+}
+#endif
Index: src/main.h
===================================================================
--- src/main.h	(revision 6188)
+++ src/main.h	(working copy)
@@ -250,6 +250,7 @@
 
         void DoAddPlugin(cbPlugin* plugin);
         void DoAddPluginToolbar(cbPlugin* plugin);
+        void DoAddPluginStatusField(cbPlugin* plugin);
         void AddPluginInPluginsMenu(cbPlugin* plugin);
         void AddPluginInSettingsMenu(cbPlugin* plugin);
         void AddPluginInHelpPluginsMenu(cbPlugin* plugin);
@@ -291,6 +292,9 @@
         void AddToRecentFilesHistory(const wxString& filename);
         void AddToRecentProjectsHistory(const wxString& filename);
         void TerminateRecentFilesHistory();
+        #if wxUSE_STATUSBAR
+        virtual wxStatusBar *OnCreateStatusBar(int number, long style, wxWindowID id, const wxString& name);
+        #endif
 
         wxFileHistory* m_pFilesHistory;
         wxFileHistory* m_pProjectsHistory;
